{"version":3,"mappings":";yEAIA,MAAMA,EAAiB,yCAEvB,IAAIC,EAAqB,KAElB,MAAMC,EAAa,SAA2B,CACnD,GAAI,CAEJ,MAAMC,EADM,YAAM,OAAO,qBAAuB,4CAE1CC,EAASD,IAAWA,EAAO,OAASA,EAAO,WAAaA,EAAO,SAAWA,GAC1EC,GAAS,OAAOA,EAAM,YAAe,YACvC,MAAMA,EAAM,aACZ,QAAQ,IAAI,6BAA6B,GAEzC,QAAQ,KAAK,uDAAuD,CAExE,OAASC,EAAK,CACZ,QAAQ,MAAM,mCAAoCA,CAAG,CACvD,CACF,EAEaC,EAAe,SAA8B,CACxD,MAAMC,EAAWC,EAAY,uBAAyBR,EACtD,GAAI,CAEJ,MAAMG,EADM,YAAM,OAAO,qBAAuB,4CAE1CC,EAASD,IAAWA,EAAO,OAASA,EAAO,WAAaA,EAAO,SAAWA,GAGxEM,GAAcL,GAAA,YAAAA,EAAO,UAAUA,GAAA,YAAAA,EAAO,YAAYA,GAAA,YAAAA,EAAO,YAC/D,OAAIK,GACFR,EAAgB,IAAIQ,EAAY,CAAE,SAAUF,EAAU,SAAU,SAAU,EACtE,OAAON,EAAc,MAAS,YAAY,MAAMA,EAAc,OAC9D,OAAOA,EAAc,MAAS,YAAY,MAAMA,EAAc,OAClE,QAAQ,IAAI,sCAAuCM,CAAQ,EACpD,IAIL,OAAOH,EAAM,YAAe,YAC9B,MAAMA,EAAM,WAAW,CAAE,SAAUG,EAAU,SAAU,SAAU,EACjE,QAAQ,IAAI,uCAAwCA,CAAQ,EACrD,KAGT,QAAQ,KAAK,iEAAiE,EACvE,GACT,OAASF,EAAK,CACZ,eAAQ,MAAM,mCAAoCA,CAAG,EAC9C,EACT,CACF,EAEaK,EAAe,SAA2B,CACrD,GAAI,CACF,GAAIT,EAAe,CACb,OAAOA,EAAc,MAAS,YAAY,MAAMA,EAAc,OAClEA,EAAgB,KAChB,QAAQ,IAAI,6BAA6B,EACzC,MACF,CAEF,MAAME,EADM,YAAM,OAAO,qBAAuB,4CAE1CC,EAASD,IAAWA,EAAO,OAASA,EAAO,WAAaA,EAAO,SAAWA,GAC9E,GAAI,OAAOC,EAAM,YAAe,WAAY,CAC1C,MAAMA,EAAM,aACZ,QAAQ,IAAI,8BAA8B,EAC1C,MACF,CACA,QAAQ,KAAK,iDAAiD,CAChE,OAASC,EAAK,CACZ,QAAQ,MAAM,mCAAoCA,CAAG,CACvD,CACF","names":["TEST_BANNER_ID","currentBanner","initMobApp","modAny","AdMob","err","showBannerAd","bannerId","define_process_env_default","BannerClass","hideBannerAd"],"ignoreList":[],"sources":["../../mobile/admobNative.ts"],"sourcesContent":["// Esta implementación intenta cargar @admob-plus/capacitor de forma dinámica\n// y es tolerante a distintas firmas de la librería. Usa un adUnitId de\n// prueba si no hay uno configurado en las variables de entorno.\n\nconst TEST_BANNER_ID = 'ca-app-pub-3940256099942544/6300978111';\n\nlet currentBanner: any = null;\n\nexport const initMobApp = async (): Promise<void> => {\n  try {\n  const mod = await import('@admob-plus/capacitor');\n  const modAny: any = mod;\n  const AdMob = (modAny && (modAny.AdMob || modAny.AdMobPlus || modAny.default || modAny));\n    if (AdMob && typeof AdMob.initialize === 'function') {\n      await AdMob.initialize();\n      console.log('AdMob inicializado (mobile)');\n    } else {\n      console.warn('AdMob initialize no disponible en el módulo importado');\n    }\n  } catch (err) {\n    console.error('Error importando AdMob (mobile):', err);\n  }\n};\n\nexport const showBannerAd = async (): Promise<boolean> => {\n  const bannerId = process.env.VITE_MOBAPP_BANNER_ID || TEST_BANNER_ID;\n  try {\n  const mod = await import('@admob-plus/capacitor');\n  const modAny: any = mod;\n  const AdMob = (modAny && (modAny.AdMob || modAny.AdMobPlus || modAny.default || modAny));\n\n    // Intenta crear una instancia Banner si existe la clase\n    const BannerClass = AdMob?.Banner || AdMob?.BannerAd || AdMob?.BannerView;\n    if (BannerClass) {\n      currentBanner = new BannerClass({ adUnitId: bannerId, position: 'bottom' });\n      if (typeof currentBanner.load === 'function') await currentBanner.load();\n      if (typeof currentBanner.show === 'function') await currentBanner.show();\n      console.log('Banner mostrado (instancia) con id:', bannerId);\n      return true;\n    }\n\n    // Fallback: si el módulo expone showBanner directamente\n    if (typeof AdMob.showBanner === 'function') {\n      await AdMob.showBanner({ adUnitId: bannerId, position: 'bottom' });\n      console.log('Banner mostrado (showBanner) con id:', bannerId);\n      return true;\n    }\n\n    console.warn('No se encontró API conocida para mostrar banner en AdMob plugin');\n    return false;\n  } catch (err) {\n    console.error('Error mostrando banner (mobile):', err);\n    return false;\n  }\n};\n\nexport const hideBannerAd = async (): Promise<void> => {\n  try {\n    if (currentBanner) {\n      if (typeof currentBanner.hide === 'function') await currentBanner.hide();\n      currentBanner = null;\n      console.log('Banner ocultado (instancia)');\n      return;\n    }\n  const mod = await import('@admob-plus/capacitor');\n  const modAny: any = mod;\n  const AdMob = (modAny && (modAny.AdMob || modAny.AdMobPlus || modAny.default || modAny));\n    if (typeof AdMob.hideBanner === 'function') {\n      await AdMob.hideBanner();\n      console.log('Banner ocultado (hideBanner)');\n      return;\n    }\n    console.warn('No se encontró API conocida para ocultar banner');\n  } catch (err) {\n    console.error('Error ocultando banner (mobile):', err);\n  }\n};\n"],"file":"assets/admobNative-C5TPMrS1.js"}